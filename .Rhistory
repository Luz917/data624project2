rf_model
rp_model
gb_model
cubist_model
plot(cubist_model,metric="Rsquared")
cubist_imp <- varImp(cubist_model, scale = FALSE)
bookTheme()
plot(cubist_imp, top=15, scales = list(y = list(cex = 0.8)))
cubist_imp <- varImp(cubist_model, scale = FALSE)
##bookTheme()
plot(cubist_imp, top=15, scales = list(y = list(cex = 0.8)))
plot(as.party(rp_model$finalModel),gp=gpar(fontsize=11))
library(partykit)
plot(as.party(rp_model$finalModel),gp=gpar(fontsize=11))
library(partykit)
plot(as.party(rp_model$finalModel),gp=gpar(fontsize=11))
library(mlbench)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
library(partykit)
plot(as.party(rp_model$finalModel),gp=gpar(fontsize=10))
library(partykit)
library(randomForest)
library(vip)
library(ggplot2)
library(caret)
library(partykit)
plot(as.party(rp_model$finalModel),gp=gpar(fontsize=10))
knitr::opts_chunk$set(echo = TRUE)
Grocery <- read.transactions("GroceryDataSet.csv", sep = ",")
library(arules)
library(arulesViz)
Grocery <- read.csv("GroceryDataSet.csv", sep = ",")
install.packages("arulesViz")
install.packages("arulesViz")
install.packages("arulesViz")
install.packages("arulesViz")
knitr::opts_chunk$set(echo = TRUE)
library(arules)
library(arulesViz)
library(arulesviz)
install.packages("arulesViz")
knitr::opts_chunk$set(echo = TRUE)
install.package("arulezViz")
install.packages("arulezViz")
Grocery <- read.csv("GroceryDataSet.csv", sep = ",")
#library(arulesviz)
library(kableExtra)
grocery <- read.csv("GroceryDataSet.csv", sep = ",")
View(Grocery)
Grocery <- NULL
kable(head(grocery))
datatable(head(grocery))
#library(arulesviz)
library(DT)
datatable(head(grocery))
View(grocery)
View(grocery)
grocery <- read.csv("GroceryDataSet.csv", sep = ",", header=FALSE)
datatable(head(grocery))
View(grocery)
View(grocery)
itemFrequencyPlot(Grocery, topN=10)
itemFrequencyPlot(grocery, topN=10)
library(arules)
library(arules)
#library(arulesviz)
library(DT)
itemFrequencyPlot(grocery, topN=10)
arules::itemFrequencyPlot(grocery, topN=10)
arules::itemFrequencyPlot(grocery, topN=10)
library(arules)
arules::itemFrequencyPlot(grocery, topN=10)
knitr::opts_chunk$set(echo = TRUE)
library(arules)
arules::itemFrequencyPlot(grocery, topN=10)
itemFrequency(grocery[,1:10])
itemFrequency(grocery[,1:10])
install.packages("arules")
knitr::opts_chunk$set(echo = TRUE)
library(arules)
itemFrequency(grocery[,1:10])
grocery <- read.transactions("GroceryDataSet.csv", sep = ",")
datatable(head(grocery))
library(arules)
#library(arulesviz)
library(DT)
datatable(head(grocery))
datatable(head(as.matrix(grocery))
datatable(head(as.matrix(grocery))
datatable(head(as.matrix(grocery)))
datatable(head(as.data.frame(grocery)))
datatable(head(as.data.frame(as.matrix(grocery))))
datatable(head(as.matrix(grocery@data)))
itemFrequency(grocery[,1:10])
arules::itemFrequencyPlot(grocery, topN=10)
summary(grocery)
itemFrequencyPlot(grocery, topN=32)
itemFrequencyPlot(grocery)
itemFrequencyPlot(grocery, topN=20)
(grocery <- read.transactions("GroceryDataSet.csv", sep = ","))
basket_model <- apriori(grocery, parameter = list(support=0.007, confidence=0.25, minlen=2))
summary(basket_model)
inspect(basket_model[1:20])
datatable(inspect(basket_model[1:20]))
inspect(basket_model[1:20])
inspect(sort(basket_model, by="lift")[1:10])
inspect(basket_model[1:10])
basket_model <- apriori(grocery, parameter = list(support=.007, confidence=0.25, minlen=2))
knitr::opts_chunk$set(echo = TRUE)
summary(basket_model)
basket_model <- apriori(grocery, parameter = list(support=.009, confidence=0.55 , minlen=2))
summary(basket_model)
basket_model <- apriori(grocery, parameter = list(support=.007, confidence=0.55 , minlen=2))
summary(basket_model)
basket_model <- apriori(grocery, parameter = list(support=.009, confidence=0.55 , minlen=2))
summary(basket_model)
basket_model <- apriori(grocery, parameter = list(support=.007, confidence=0.55 , minlen=2))
summary(basket_model)
inspect(basket_model[1:10])
inspect(sort(basket_model, by="lift")[1:10])
basket_model <- apriori(grocery, parameter = list(support=.007, confidence=0.55 , minlen=2))
summary(basket_model)
inspect(sort(basket_model, by="lift")[1:10])
basket_model <- apriori(grocery, parameter = list(support=.009, confidence=0.55 , minlen=2))
summary(basket_model)
inspect(sort(basket_model, by="lift")[1:10])
library(arulesviz)
install.packages("arulesViz", dependencies = FALSE)
install.packages("dendextend", dependencies = FALSE)
install.packages("dplyr")
install.packages("lifecycle")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(arules)
subrules <- head(rules[[3]], n=10, by='lift')
rules <- head(basket.model, n = 10, by = "lift")
rules <- head(basket_model, n = 10, by = "lift")
plot(rules, method = "graph")
library(arulesviz)
install.packages("arulesViz")
install.packages("dplyr")
install.packages("arulesViz")
install.packages("lifecycle")
install.packages("lifecyle")
install.packages("lifecycle")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
Sys.which("make")
install.packages("jsonlite", type = "source")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.setenv(PATH = paste(Sys.getenv("PATH"),
"C:\\rtools40\\mingw64\\bin",
sep = ";"))
Sys.getenv("PATH")
install.packages("lifecycle")
Sys.getenv("PATH")
Sys.getenv("PATH")
install.packages("jsonlite", type = "source")
library(installr)
install.Rtools(choose_version = TRUE)
install.packages("installr")
install.Rtools(choose_version = TRUE)
install.packages("tidyverse")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
# student_data
Brand.A <- ifelse(student_data$Brand.Code  == 'A', 1, 0)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mice)
library(caret)
library(e1071)
library(psych)
library(DataExplorer)
library(RANN)
library(MASS)
library(ggplot2)
library(elasticnet)
library(randomForest)
library(skimr)
library(DataExplorer)
library(GGally)
library(corrplot)
library(DT)
library(usdm)
student_data<-read.csv("https://raw.githubusercontent.com/Luz917/data624project2/master/StudentData.csv")
student_eval<-read.csv("https://raw.githubusercontent.com/Luz917/data624project2/master/StudentEvaluation.csv")
skim(student_data)
table(student_data$ï..Brand.Code)
names(student_data)[names(student_data) == "ï..Brand.Code"] <- "Brand.Code"
names(student_eval)[names(student_eval) == "ï..Brand.Code"] <- "Brand.Code"
hist(student_data$PH)
plot_histogram((student_data[-c(26)]))
pairs(student_data[c(26,2:11)], col="grey40")
pairs(student_data[c(26,12:22)], col="grey40")
pairs(student_data[c(26,23:25,27:33)], col="grey40")
corr_data =cor(student_data[c(26,2:25,27:33)], use="pairwise.complete.obs", method = "pearson")
corrplot(corr_data, method = "color",type = "upper", order = "original", number.cex = .7,addCoef.col = "black",   #Add coefficient of correlation
tl.srt = 90,# Text label color and rotation
diag = TRUE)# hide correlation coefficient on the principal diagonal
(vif_result <- vifcor(na.omit(student_data[c(2:25,27:33)])))
temp <- student_data[c(2:25,27:33)]
temp$Balling <- NULL
temp$Bowl.Setpoint <- NULL
temp$Balling.Lvl <- NULL
temp$MFR <- NULL
temp$Hyd.Pressure3 <- NULL
temp$Alch.Rel <- NULL
vifcor(temp)
x <- data.frame(scale(na.omit(student_data[c(2:33)])))
ggplot(stack(x), aes(x= ind, y = values)) +
geom_boxplot(outlier.colour="blue", outlier.shape=1, outlier.size=2, aes(fill=ind)) + theme_minimal() + coord_flip()
plot_histogram(student_data[c(23, 18, 27, 30, 19, 21)])
student_data[student_data$Brand.Code=="",]$Brand.Code <- NA
plot_missing(student_data)
result <- nearZeroVar(student_data, saveMetrics= TRUE)
datatable(result[order(-result$nzv),])
#copy of original student_data
student_data2 <- student_data
student_data$Hyd.Pressure1 <- NULL
student_data$Balling <- NULL
student_data$Bowl.Setpoint <- NULL
student_data$Balling.Lvl <- NULL
student_data$MFR <- NULL
student_data$Hyd.Pressure3 <- NULL
student_data$Alch.Rel <- NULL
student_data <- student_data[!is.na(student_data$PH), ]
student_data[is.na(student_data$Brand.Code),]$Brand.Code <- 'U'
boxplot(formula=PH~`Brand.Code`, data=student_data)
s3obj_mice = mice(student_data, print = FALSE, seed = 360)
densityplot(s3obj_mice)
student_data = complete(s3obj_mice)
skim(student_data)
# student_data
Brand.A <- ifelse(student_data$Brand.Code  == 'A', 1, 0)
Brand.B <- ifelse(student_data$Brand.Code  == 'B', 1, 0)
Brand.C <- ifelse(student_data$Brand.Code  == 'C', 1, 0)
Brand.D <- ifelse(student_data$Brand.Code  == 'D', 1, 0)
Brand.U <- ifelse(student_data$Brand.Code  == 'U', 1, 0)
# add dummy columns to data frame
student_data$Brand.A <- Brand.A
student_data$Brand.B <- Brand.B
student_data$Brand.C <- Brand.C
student_data$Brand.D <- Brand.D
# remove categorical variable
student_data <- subset(student_data, select = -c(Brand.Code))
skim(student_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mice)
library(caret)
library(e1071)
library(psych)
library(DataExplorer)
library(RANN)
library(MASS)
library(ggplot2)
library(elasticnet)
library(randomForest)
library(skimr)
library(DataExplorer)
library(GGally)
library(corrplot)
library(DT)
library(usdm)
student_data<-read.csv("https://raw.githubusercontent.com/Luz917/data624project2/master/StudentData.csv")
student_eval<-read.csv("https://raw.githubusercontent.com/Luz917/data624project2/master/StudentEvaluation.csv")
skim(student_data)
table(student_data$ï..Brand.Code)
names(student_data)[names(student_data) == "ï..Brand.Code"] <- "Brand.Code"
names(student_eval)[names(student_eval) == "ï..Brand.Code"] <- "Brand.Code"
hist(student_data$PH)
plot_histogram((student_data[-c(26)]))
pairs(student_data[c(26,2:11)], col="grey40")
pairs(student_data[c(26,12:22)], col="grey40")
pairs(student_data[c(26,23:25,27:33)], col="grey40")
corr_data =cor(student_data[c(26,2:25,27:33)], use="pairwise.complete.obs", method = "pearson")
corrplot(corr_data, method = "color",type = "upper", order = "original", number.cex = .7,addCoef.col = "black",   #Add coefficient of correlation
tl.srt = 90,# Text label color and rotation
diag = TRUE)# hide correlation coefficient on the principal diagonal
(vif_result <- vifcor(na.omit(student_data[c(2:25,27:33)])))
temp <- student_data[c(2:25,27:33)]
temp$Balling <- NULL
temp$Bowl.Setpoint <- NULL
temp$Balling.Lvl <- NULL
temp$MFR <- NULL
temp$Hyd.Pressure3 <- NULL
temp$Alch.Rel <- NULL
vifcor(temp)
x <- data.frame(scale(na.omit(student_data[c(2:33)])))
ggplot(stack(x), aes(x= ind, y = values)) +
geom_boxplot(outlier.colour="blue", outlier.shape=1, outlier.size=2, aes(fill=ind)) + theme_minimal() + coord_flip()
plot_histogram(student_data[c(23, 18, 27, 30, 19, 21)])
student_data[student_data$Brand.Code=="",]$Brand.Code <- NA
plot_missing(student_data)
result <- nearZeroVar(student_data, saveMetrics= TRUE)
datatable(result[order(-result$nzv),])
#copy of original student_data
student_data2 <- student_data
student_data$Hyd.Pressure1 <- NULL
student_data$Balling <- NULL
student_data$Bowl.Setpoint <- NULL
student_data$Balling.Lvl <- NULL
student_data$MFR <- NULL
student_data$Hyd.Pressure3 <- NULL
student_data$Alch.Rel <- NULL
student_data <- student_data[!is.na(student_data$PH), ]
student_data[is.na(student_data$Brand.Code),]$Brand.Code <- 'U'
boxplot(formula=PH~`Brand.Code`, data=student_data)
s3obj_mice = mice(student_data, print = FALSE, seed = 360)
densityplot(s3obj_mice)
student_data = complete(s3obj_mice)
skim(student_data)
# student_data
Brand.A <- ifelse(student_data$Brand.Code  == 'A', 1, 0)
Brand.B <- ifelse(student_data$Brand.Code  == 'B', 1, 0)
Brand.C <- ifelse(student_data$Brand.Code  == 'C', 1, 0)
Brand.D <- ifelse(student_data$Brand.Code  == 'D', 1, 0)
Brand.U <- ifelse(student_data$Brand.Code  == 'U', 1, 0)
# add dummy columns to data frame
student_data$Brand.A <- Brand.A
student_data$Brand.B <- Brand.B
student_data$Brand.C <- Brand.C
student_data$Brand.D <- Brand.D
student_data$Brand.U <- Brand.U
# remove categorical variable
student_data <- subset(student_data, select = -c(Brand.Code))
skim(student_data)
# Create training and testing split from training data
set.seed(525)
trainrow = createDataPartition(student_data$PH, p = 0.80, list = FALSE)
student_data_train <- student_data[trainrow, ]
student_data_test <- student_data[-trainrow, ]
colPH <- which(colnames(student_data) == "PH")
train_X <- student_data_train[, -colPH]
train_Y <- student_data_train$PH
test_X <- student_data_test[, -colPH]
test_Y <- student_data_test$PH
set.seed(1)
PLS_model <- train(x=train_X,
y=train_Y,
method='pls',
metric='Rsquared',
tuneLength=20,
trControl=trainControl(method='cv'),
preProcess=c('center', 'scale')
)
PLS_model
plot(PLS_model)
set.seed(1)
PLS_model <- train(x=train_X,
y=train_Y,
method='pls',
metric='RMSE',
tuneLength=20,
trControl=trainControl(method='cv'),
preProcess=c('center', 'scale')
)
PLS_model
plot(PLS_model)
set.seed(1)
PLS_model <- train(x=train_X,
y=train_Y,
method='pls',
metric='MAE',
tuneLength=20,
trControl=trainControl(method='cv'),
preProcess=c('center', 'scale')
)
PLS_model
PLS_model_pred <- predict(PLS_model, newdata=test_X)
postResample(pred=PLS_model_pred, obs=test_Y)
set.seed(1)
PLS_model <- train(x=train_X,
y=train_Y,
method='pls',
metric='RMSE',
tuneLength=20,
trControl=trainControl(method='cv'),
preProcess=c('center', 'scale')
)
PLS_model
plot(PLS_model)
## Define the candidate set of values
ridgeGrid <- data.frame(.lambda = seq(0, 1, by=0.1))
set.seed(1)
ridge_model <- train(x=train_X,
y=train_Y,
method = "ridge",
tuneGrid = ridgeGrid,
trControl = trainControl(method='cv') ,
preProc = c("center", "scale")
)
ridge_model
plot(ridge_model)
ridge_model_pred <- predict(ridge_model, newdata=test_X)
postResample(pred=ridge_model_pred, obs=test_Y)
set.seed(1)
enet_model <- train(x=train_X,
y= train_Y,
method = "enet",
tuneGrid=expand.grid(.fraction = seq(0, 1, by=0.1),
.lambda = seq(0, 1, by=0.1)),
trControl = trainControl(method='cv') ,
preProc = c("center", "scale")
)
enet_model
plot(enet_model)
enet_model_pred <- predict(enet_model, newdata=test_X)
postResample(pred=enet_model_pred, obs=test_Y)
set.seed(1)
lasso_model <- train(x=train_X,
y=train_Y,
method='lasso',
metric='Rsquared',
tuneGrid=data.frame(.fraction = seq(0, 0.5, by=0.05)),
trControl=trainControl(method='cv'),
preProcess=c('center','scale')
)
lasso_model
plot(lasso_model)
lasso_model_pred <- predict(lasso_model, newdata=test_X)
postResample(pred=lasso_model_pred, obs=test_Y)
library(randomForest)
library(vip)
install.packages("vip")
library(vip)
rf_model <- randomForest(x = train_X, y = train_Y, ntree = 100)
rf_model_pred <- predict(rf_model, test_X)
postResample(pred = rf_model_pred, obs = test_Y)
rf_model <- randomForest(x = train_X, y = train_Y, ntree = 100)
rf_model
rf_model_pred <- predict(rf_model, test_X)
postResample(pred = rf_model_pred, obs = test_Y)
library(gbm)
install.packages("gbm")
library(gbm)
gbmGrid = expand.grid(interaction.depth = seq(1,5, by=2), n.trees = seq(100, 1000, by = 100), shrinkage = 0.1, n.minobsinnode = 5)
gbm_model <- train(train_X, train_Y, tuneGrid = gbmGrid, verbose = FALSE, method = 'gbm' )
gbm_model
gbm_model_pred <- predict(gbm_model, test_X)
postResample(pred = gbm_model_pred, obs = test_Y)
set.seed(1)
knn_model <- train(train_x, train_y,
method="knn",
preProcess=pre_process,
tuneLength=10, trainControl=trainControl(method = "repeatedcv", repeats = 5))
set.seed(1)
knn_model <- train(train_x, train_y,
method="knn",
preProcess=pre_process,
tuneLength=10, trainControl=trainControl(method = "repeatedcv", repeats = 5))
View(train_X)
set.seed(1)
knn_model <- train(x=train_x, y=train_y,
method="knn",
preProcess=pre_process,
tuneLength=10, trainControl=trainControl(method = "repeatedcv", repeats = 5))
set.seed(1)
lasso_model <- train(x=train_X,
y=train_Y,
method='lasso',
metric='Rsquared',
tuneGrid=data.frame(.fraction = seq(0, 0.5, by=0.05)),
trControl=trainControl(method='cv'),
preProcess=c('center','scale')
)
lasso_model
set.seed(1)
knn_model <- train(x=train_X, y=train_y,
method="knn",
preProcess=pre_process,
tuneLength=10, trainControl=trainControl(method = "repeatedcv", repeats = 5))
set.seed(1)
knn_model <- train(x=train_X,
y=train_y,
method="knn",
tuneLength=10,
trainControl=trainControl(method = "repeatedcv", repeats = 5),
preProc = c("center", "scale"))
set.seed(1)
knn_model <- train(x=train_X,
y=train_Y,
method="knn",
tuneLength=10,
trainControl=trainControl(method = "repeatedcv", repeats = 5),
preProc = c("center", "scale"))
knn_model
plot(knn_model)
knn_pred <- predict(knn_model, newdata=test_x)
postResample(pred=knn_pred,test_Y)
knn_pred <- predict(knn_model, newdata=test_x)
knn_pred <- predict(knn_model, newdata=test_X)
postResample(pred=knn_pred,test_Y)
svm_model <- train(train_X,
train_Y,
method="svmRadial",
tuneLength=10,
trainControl=trainControl(method = "repeatedcv", repeats = 5),
preProc = c("center", "scale"))
